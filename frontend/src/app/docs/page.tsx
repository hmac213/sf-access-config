import React from 'react';
import Link from 'next/link';

export default function Docs() {
  return (
    <div className="min-h-screen bg-gray-50 text-gray-900">
      {/* Header Section */}
      <header className="bg-gradient-to-r from-purple-600 to-blue-600 py-12">
        <div className="max-w-4xl mx-auto px-4">
          <h1 className="text-5xl font-extrabold text-white text-center">Documentation</h1>
          <div className="text-center mt-4">
            <Link href="/" className="inline-block bg-white text-purple-600 font-semibold py-2 px-4 rounded hover:bg-gray-100">Return to Home</Link>
          </div>
          <p className="mt-4 text-xl text-gray-200 text-center">
            Comprehensive guide to install, configure, and integrate eqlec.tech to enhance your website&apos;s accessibility.
          </p>
        </div>
      </header>

      {/* Main Content Section */}
      <main className="max-w-4xl mx-auto px-4 py-12 space-y-12">
        
        {/* Installation Guide */}
        <section className="bg-white shadow-lg rounded-lg p-6">
          <h2 className="text-3xl font-semibold mb-4 border-b pb-2">1. Installation</h2>
          <p className="mb-4">
            Install the eqlec.tech accessibility package using npm or your preferred package manager:
          </p>
          <pre className="bg-gray-100 p-4 rounded font-mono text-sm overflow-x-auto">
            npm install eqlectech-accessibility
          </pre>
        </section>

        {/* Environment Configuration (Optional: For AI Features) */}
        <section className="bg-white shadow-lg rounded-lg p-6">
          <h2 className="text-3xl font-semibold mb-4 border-b pb-2">2. Environment Configuration (Optional)</h2>
          <p className="mb-4">
            If you plan to use generative AI features (like potential future audio transcriptions requiring external services), create a <code>.env.local</code> file at the root of your project and add your Gemini API key (or other relevant keys):
          </p>
          <pre className="bg-gray-100 p-4 rounded font-mono text-sm overflow-x-auto">
            GEMINI_API_KEY=your_gemini_api_key_here
          </pre>
          <p className="mt-2 text-gray-700">
            Replace <code>your_gemini_api_key_here</code> with your actual API key. Remember to add <code>.env.local</code> to your <code>.gitignore</code> file to prevent committing secrets.
          </p>
        </section>

        {/* React / Next.js Integration */}
        <section className="bg-white shadow-lg rounded-lg p-6">
          <h2 className="text-3xl font-semibold mb-4 border-b pb-2">3. React / Next.js Integration</h2>
          <p className="mb-4">
            To integrate eqlec.tech into your React or Next.js application, you typically include the custom element within your main layout component (e.g., <code>layout.tsx</code> in Next.js App Router).
          </p>
          <p className="mb-2">Example using Next.js App Router (<code>src/app/layout.tsx</code>):</p>
          <pre className="bg-gray-100 p-4 rounded font-mono text-sm overflow-x-auto">
{`import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
// Potentially import useState if needed for dynamic logic later
// import { useState } from 'react'; 

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "My App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // const [someState, setSomeState] = useState(initialValue); // Example useState

  return (
    <html lang="en">
      <body className={inter.className}>
        {children}
        {/* Include the eqlec.tech custom element */}
        <eqlec-tech /> 
      </body>
    </html>
  );
}`}
          </pre>
          <p className="mt-2 text-gray-700">
            Place the <code>&lt;eqlec-tech /&gt;</code> tag typically just before the closing <code>&lt;/body&gt;</code> tag. While <code>useState</code> isn&apos;t strictly required just to render the tag, you might import and use it later if you need to interact with the component dynamically.
          </p>
        </section>
        
        {/* Basic HTML Integration (Alternative) */}
        <section className="bg-white shadow-lg rounded-lg p-6">
          <h2 className="text-3xl font-semibold mb-4 border-b pb-2">Alternative: Basic HTML Integration</h2>
          <p className="mb-4">
            For non-React setups or simpler integrations, ensure your build process includes the package and then add the custom HTML tag directly into your main HTML file (e.g., <code>index.html</code>):
          </p>
          <pre className="bg-gray-100 p-4 rounded font-mono text-sm overflow-x-auto">
            &lt;eqlec-tech /&gt;
          </pre>
        </section>

        {/* TypeScript Configuration */}
        <section className="bg-white shadow-lg rounded-lg p-6">
          <h2 className="text-3xl font-semibold mb-4 border-b pb-2">4. TypeScript Configuration</h2>
          <p className="mb-4">
            To make TypeScript recognize the <code>&lt;eqlec-tech /&gt;</code> custom element in your JSX, create a type declaration file (e.g., <code>eqlectech-accessibility.d.ts</code> or <code>global.d.ts</code>) in your project&apos;s source directory:
          </p>
          <pre className="bg-gray-100 p-4 rounded font-mono text-sm overflow-x-auto">
{`// eqlectech-accessibility.d.ts
declare namespace JSX {
  interface IntrinsicElements {
    'eqlec-tech': React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
    // Add any other custom elements if needed
  }
}`}
          </pre>
          <p className="mt-4 mb-4">
            Then, ensure this declaration file is included in your TypeScript configuration. Add the file path or a wildcard pattern matching it to the <code>include</code> array in your <code>tsconfig.json</code>:
          </p>
          <pre className="bg-gray-100 p-4 rounded font-mono text-sm overflow-x-auto">
{`{
  "compilerOptions": {
    // ... your other options
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", "eqlectech-accessibility.d.ts"], 
  // Or use a broader pattern like "src/**/*.d.ts" if applicable
  "exclude": ["node_modules"]
}`}
          </pre>
        </section>

        {/* Control Attributes */}
        <section className="bg-white shadow-lg rounded-lg p-6">
          <h2 className="text-3xl font-semibold mb-4 border-b pb-2">Available Accessibility Attributes</h2>
          <p className="mb-4">
            When users configure their preferences via the eqlec.tech interface, the following attributes may be dynamically applied to the <code>&lt;body&gt;</code> or relevant elements, enabling specific accessibility features:
          </p>
          <ul className="list-disc list-inside space-y-2 text-lg">
            <li><strong>enable-high-contrast</strong>: Activates a high contrast mode.</li>
            <li><strong>enable-large-font</strong>: Increases text size for better readability.</li>
            <li><strong>enable-sparse-text</strong>: Increases spacing between text elements.</li>
            <li><strong>enable-screen-reader</strong>: Optimizes the site structure and attributes for screen reader compatibility.</li>
            <li><strong>enable-live-subtitles</strong>: Enables generation of subtitles for audio content (may require additional configuration or API keys).</li>
            {/* Add other attributes if they exist */}
          </ul>
           <p className="mt-4 text-gray-700">
             Your application&apos;s CSS or JavaScript can target these attributes to modify the presentation or behavior accordingly (e.g., <code>body[enable-high-contrast] { /* high contrast styles */ }</code>).
           </p>
        </section>

      </main>

      {/* Footer */}
      <footer className="bg-gray-100 py-6 mt-12">
        <div className="max-w-4xl mx-auto px-4 text-center text-gray-600">
          <p>&copy; {new Date().getFullYear()} eqlec.tech. All rights reserved.</p>
        </div>
      </footer>
    </div>
  );
}